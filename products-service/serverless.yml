org: drozdsi
app: aws-be
service: products-service
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  profile: '489669634691_Siarhei_Drozd'
  region: 'us-east-1'
  stage: dev
  versionFunctions: false
  environment:
    STAGE: ${self:custom.stage}
    DB_STOCK: ${self:custom.DB_STOCK.${self:custom.stage}}
    DB_PRODUCTS: ${self:custom.DB_PRODUCTS.${self:custom.stage}}
    AWS_SDK_LOAD_CONFIG: 1
  iam:
    role:
      name: lambdaAccess
      statements:
        - Effect: Allow
          Action:
            - 'dynamodb:Scan'
            - 'dynamodb:Query'
            - 'dynamodb:PutItem'
            - 'dynamodb:BatchWriteItem'
          Resource: '*'
        - Effect: Allow
          Action:
            - 'sqs:SendMessage'
            - 'sqs:ReceiveMessage'
            - 'sqs:DeleteMessage'
            - 'sqs:GetQueueAttributes'
          Resource:
            Fn::GetAtt:
              - catalogItemsQueue
              - Arn
        - Effect: Allow
          Action:
            - 'sns:Publish'
          Resource: '*'

plugins:
  - serverless-auto-swagger
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline
#
#constructs:
#  catalogItemsQueue:
#    type: queue
#    worker:
#      handler: src/worker.handler
custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    packager: 'npm'
  autoswagger:
    title: 'string'
    apiType: 'http'
    generateSwaggerOnDeploy: true
    typefiles: [ ]
    schemes: [ 'https', 'http' ]
    basePath: '/dev'
  dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      docker: true
      port: 8000
      inMemory: true
      migrate: true
      seed: true
      convertEmptyValues: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true
  stage: ${opt:stage, self:provider.stage}
  DB_STOCK:
    dev: ${ssm:/system/api/DB_STOCK}
  DB_PRODUCTS:
    dev: ${ssm:/system/api/DB_PRODUCTS}

resources:
  Resources:
    catalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: "catalogItemsQueue.fifo"
        VisibilityTimeout: 60
        ContentBasedDeduplication: true
        FifoQueue: True
    createProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: "createProductTopic"
    cptEmptySubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        Endpoint: "ggold.d.roger@gmail.com"
        TopicArn: !Ref createProductTopic
        FilterPolicyScope: MessageAttributes
        FilterPolicy:
          Count:
            - empty
    cptStockSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        Endpoint: "siarhei_drozd@epam.com"
        TopicArn: !Ref createProductTopic
        FilterPolicyScope: MessageAttributes
        FilterPolicy:
          Count:
            - stock

functions:
  getProductsList:
    handler: handler.getProductsList
    events:
      - http:
          path: /products
          method: get
          cors: true
  getProductsById:
    handler: handler.getProductsById
    events:
      - http:
          path: /products/{productId}
          method: get
          cors: true
  createProduct:
    handler: handler.createProduct
    events:
      - http:
          path: /products
          method: post
          cors: true
          request:
            parameters:
              querystrings:
                count: false
                title: false
                description: false
                price: false
  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - catalogItemsQueue
              - Arn
          batchSize: 5
